module SkelLang where

-- Haskell module generated by the BNF converter

import AbsLang
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProg :: Prog -> Result
transProg x = case x of
  Program stm -> failure x
transExp :: Exp -> Result
transExp x = case x of
  EAdd exp1 exp2 -> failure x
  ESub exp1 exp2 -> failure x
  EMul exp1 exp2 -> failure x
  EDiv exp1 exp2 -> failure x
  EInt integer -> failure x
  ECall ident exp -> failure x
  EInc ident -> failure x
  EDec ident -> failure x
  EVar ident -> failure x
  BTrue -> failure x
  BFalse -> failure x
  BLe exp1 exp2 -> failure x
  BLt exp1 exp2 -> failure x
  BGe exp1 exp2 -> failure x
  BGt exp1 exp2 -> failure x
  BEq exp1 exp2 -> failure x
  BCon exp1 exp2 -> failure x
  BAlt exp1 exp2 -> failure x
  BNeg exp -> failure x
  FLam ident stm -> failure x
transStm :: Stm -> Result
transStm x = case x of
  SAss ident exp -> failure x
  SWhile exp stm -> failure x
  SIf exp stm -> failure x
  SIfEl exp stm1 stm2 -> failure x
  SBlock decls stms -> failure x
  SPrint exp -> failure x
  SFor ident exp1 exp2 stm -> failure x
  SRet exp -> failure x
  SYield exp -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  DVar type_ ident -> failure x
  DFun ident1 ident2 stm -> failure x
  DRFun ident1 ident2 stm -> failure x
  DFFun ident1 ident2 stm -> failure x
transType :: Type -> Result
transType x = case x of
  TInt -> failure x
  TBool -> failure x

