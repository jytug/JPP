comment "//" ;
comment "/*" "*/" ;

Program.    Prog    ::= Stm ;

-- Integer expressions
EAdd.   Exp     ::= Exp  "+" Exp1 ;
ESub.   Exp     ::= Exp  "-" Exp1 ;
EMul.   Exp1    ::= Exp1 "*" Exp2 ;
EDiv.   Exp1    ::= Exp1 "/" Exp2 ;
EInt.   Exp2    ::= Integer ;

ECall.  Exp1    ::= Ident "(" Exp ")" ;
EInc.   Exp2    ::= Ident "++" ;
EDec.   Exp2    ::= Ident "--" ;
EVar.   Exp2    ::= Ident ;

coercions Exp 2 ;

-- Boolean expressions
BTrue.  Exp2   ::= "true" ;
BFalse. Exp2   ::= "false" ;
BLe.    Exp    ::= Exp "<=" Exp1 ;
BLt.    Exp    ::= Exp "<" Exp1 ;
BGe.    Exp    ::= Exp ">=" Exp1 ;
BGt.    Exp    ::= Exp ">" Exp1 ;
BEq.    Exp    ::= Exp "==" Exp1 ;
BCon.   Exp    ::= Exp "and" Exp1 ;
BAlt.   Exp    ::= Exp "or" Exp1 ;
BNeg.   Exp1   ::= "not" Exp2 ;

-- Functional expressions
FLam.   Exp    ::= "lambda" "(" Ident ")" ":" Stm;

terminator Stm  "" ;
terminator Decl "." ;
separator Stm ";" ;
separator Decl "," ;

-- Statements
SAss.   Stm     ::= Ident "=" Exp ;
SWhile. Stm     ::= "while" Exp "do" Stm ;
SIf.    Stm     ::= "if" Exp "then" Stm ;
SIfEl.  Stm     ::= "if" Exp "then" Stm "else" Stm ;
SBlock. Stm     ::= "{" [Decl]  [Stm] "}" ;
SPrint. Stm     ::= "print" Exp ;
SFor.   Stm     ::= "for" Ident "ranging" "from" Exp "to" Exp "do" Stm ;
SRet.   Stm     ::= "return" Exp ;
SYield. Stm     ::= "yield" Exp ;

-- Declarations
DVar.   Decl    ::= Type Ident ;
DFun.   Decl    ::= "function" Ident "(" Ident ")" Stm ;
DRFun.  Decl    ::= "function" Ident "(" "ref" Ident ")" Stm ;
DFFun.  Decl    ::= "function" Ident "(" "fun" Ident ")" Stm ;

-- Types
TInt.   Type    ::= "int" ;
TBool.  Type    ::= "bool" ;
